<template id="searchbox">
    <!-- ko stopBinding: true -->
    <div class="searchbox">
        <style>
            .searchbox-container {
                display: block;
                position: fixed;
                z-index: 3000;
            }

            .searchbox-container {
                background: #fff;
                border: 1px solid #bbb;
                border-radius: 3px;
            }

            .searchbox-item {
                padding: .5rem;
                cursor: pointer;
            }

                .searchbox-item:hover {
                    background-color: #ddd;
                    color: #aaa;
                }
        </style>
        <!-- ko if: isFocused() || isActive() -->
        <!-- ko if: hasItems() -->
        <div class="searchbox-container">
            <!-- ko foreach: itemsVM -->
            <div class="searchbox-item" data-bind="click: select">
            </div>
            <!-- /ko -->
        </div>
        <!-- /ko -->
        <!-- /ko -->
    </div>
    <!-- /ko -->
</template>
<template id="searchbox-item">
    <span data-bind="text: item.name"></span>
    <span>(</span>
    <span data-bind="text: item.id"></span>
    <span>)</span>
</template>
<script>
    ko.bindingHandlers.stopBinding = {
        init: function () {
            return { controlsDescendantBindings: true };
        },
    };
    ko.virtualElements.allowedBindings.stopBinding = true;

    ko.bindingHandlers.searchbox = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            $(element).attr("autocomplete", "off");
            $(element).attr("data-bind", "value: dataTextDisplay, hasFocus: isFocused, valueUpdate: 'afterkeydown', enterkey: onEnter, event: { focus: onFocus, blur: onBlur }");

            let template = $("template#searchbox");
            $(element).parent().append(template.html());

            let params = valueAccessor();
            let vm = new ComponentSearchboxViewModel(params.url, params.dataValueField, params.dataTextField, params.value, params.renderTemplate).init(true);
            let dom = $(element).next()[0];

            $(dom).prepend(element);

            ko.cleanNode(dom);
            ko.applyBindings(vm, dom);
        },
    };

    function ComponentSearchboxViewModel(url, dataValueField, dataTextField, value, renderTemplate) {
        let vm = this;

        // ------------------------------------------

        vm.isFocused = ko.observable().extend({ throttle: 500 });
        vm.isActive = ko.observable().extend({ throttle: 500 });
        vm.dataValue = ko.observable();
        vm.dataText = ko.observable().extend({ throttle: 500 });
        vm.dataTextDisplay = ko.observable();
        vm.dataTextLast = ko.observable();
        vm.itemsVM = ko.observableArray();

        // ------------------------------------------

        vm.hasItems = ko.computed(() => {
            return 0 < vm.itemsVM().length;
        });

        // ------------------------------------------

        vm.dataValue.subscribe(x => {
            value(x);
        });

        vm.dataText.subscribe(x => {
            vm.init(false);
        });

        vm.dataTextDisplay.subscribe(x => {
            vm.dataText(x);
        });

        vm.dataTextLast.subscribe(x => {
            vm.dataTextDisplay(x);
        });

        vm.isActive.subscribe(x => {
            vm.onUpdate();
        });

        vm.itemsVM.subscribe(x => {
            vm.onUpdate();
        });

        // ------------------------------------------

        vm.init = function (select) {
            let request = {
                data: vm.dataText(),
            };
            ajaxRequest(url, request, response => {
                vm.itemsVM([]);
                $(response.items).each((i, x) => {
                    let itemVM = new ComponentSearchboxItemViewModel(vm, dataValueField, dataTextField).init(x);
                    vm.itemsVM().push(itemVM);

                    if (select && value() == itemVM.dataValue()) {
                        itemVM.select();
                    }
                });
                vm.itemsVM.valueHasMutated();
            });
            return vm;
        };

        vm.select = function () {
            if (0 < vm.itemsVM().length) {
                let itemVM = vm.itemsVM()[0];
                itemVM.select();
            }
        };

        vm.onEnter = function () {
            vm.select();
            $(".searchbox input").blur();
        };

        vm.onUpdate = function () {
            let template = $(renderTemplate && "#" + renderTemplate || "template#searchbox-item");
            let jquery = $(".searchbox-item");

            jquery.html(template.html());
            jquery.each((i1, x1) => {
                $(x1).children().each((i2, x2) => {
                    ko.applyBindings(vm.itemsVM()[i1], x2);
                });
            });
        };

        vm.onFocus = function () {
            vm.isActive(true);
        };

        vm.onBlur = function () {
            vm.dataTextDisplay(vm.dataTextLast());
            vm.isActive(false);
        };
    }

    function ComponentSearchboxItemViewModel(componentVM, dataValueField, dataTextField) {
        let vm = this;

        // ------------------------------------------

        vm.item = null;

        // ------------------------------------------

        vm.dataValue = function () {
            return vm.item && vm.item[dataValueField];
        };

        vm.dataText = function () {
            return vm.item && vm.item[dataTextField];
        };

        // ------------------------------------------

        vm.init = function (data) {
            vm.item = data;
            return vm;
        };

        vm.select = function () {
            componentVM.dataValue(vm.dataValue());
            componentVM.dataTextLast(vm.dataText());
        };
    }
</script>